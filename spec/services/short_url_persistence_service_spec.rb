require 'rails_helper'

RSpec.describe ShortUrlPersistenceService do

  let(:url) { 'http://www.test.com' }
  let(:service) { ShortUrlPersistenceService.new(url) }

  describe 'save!' do
    subject { service.save! }

    it 'saves a new short_url to the database' do
      expect { subject }.to change { ShortUrl.count }.by(1)
    end

    context 'when there is a collision for short-url' do
      let(:colliding_url) { '****' } # Guarenteed not to be re-generated by ShortUrl on retry
      before { ShortUrl.create!(original_url: 'test.com', short_url: colliding_url) }

      it 'retries and saves successfully to database' do
        expect { subject }.to change { ShortUrl.count }.by(1)
      end

      context 'and the collision happens 5 times (user is super lucky)' do
        before { allow(SecureRandom).to receive(:hex).and_return(colliding_url) }

        it 'raises RecordNotUnique error' do
          expect { subject }.to raise_error(ActiveRecord::RecordNotUnique)
        end
      end
    end

    context 'when an invalid url is given' do
      let(:url) { 'lol' }

      it 'records the error' do
        subject
        expect(service.errors).to_not be_empty
      end

      it 'does not save the url' do
        expect{ subject }.to_not change{ ShortUrl.count }
      end
    end
  end
end
