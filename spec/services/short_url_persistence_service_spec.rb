require 'rails_helper'

RSpec.describe ShortUrlPersistenceService do

  let(:short_url_init) { ShortUrl.new(original_url: 'test.com') }
  let(:service) { ShortUrlPersistenceService.new(short_url_init) }

  describe 'save!' do
    subject { service.save! }

    it 'saves the short_url to the database' do
      expect { subject }.to change { ShortUrl.count }.by(1)
    end

    context 'when the short_url is invalid' do
      let(:short_url_init) { ShortUrl.new } # missing url

      it 'Adds errors to errors array' do
        subject
        expect(service.errors).to_not be_empty
      end
    end

    context 'when there is a collision for short-url' do
      let(:colliding_url) { '****' } # Guarenteed not to be re-generated by ShortUrl on retry
      let(:short_url_init) { ShortUrl.new(original_url: 'test.com', short_url: colliding_url) }
      before { ShortUrl.create!(original_url: 'test.com', short_url: colliding_url) }

      it 'retries and saves successfully to database' do
        expect { subject }.to change { ShortUrl.count }.by(1)
      end

      context 'and the collision happens 5 times (user is super lucky)' do
        before { allow(SecureRandom).to receive(:hex).and_return(colliding_url) }

        it 'raises RecordNotUnique error' do
          expect { subject }.to raise_error(ActiveRecord::RecordNotUnique)
        end
      end
    end
  end
end
